/*! 
  glCheckbox v(0.0.3) 
  (c) 2013-2015
  https://gluenetworks.kilnhg.com/Code/Web-Development
  Release Date: 2015-04-06 
*/

angular.module("glCheckbox", []), angular.module("glCheckbox").directive("glCheckbox", [ "$compile", "$timeout", function(a, b) {
    "use strict";
    return {
        restrict: "E",
        scope: {
            settings: "=",
            api: "="
        },
        link: function(c, d, e, f) {
            function g(a) {
                if (angular.isArray(c.api._data.value) && c.api._data.value.length > 0) {
                    if (c.api._data.value.indexOf(a) >= 0) return;
                    c.api._data.value.push(a);
                } else c.api._data.value = [ a ];
            }
            function h(a) {
                if (angular.isArray(c.api._data.value)) for (var b = 0; b < c.api._data.value.length; b++) c.api._data.value[b] == a && (console.log("scope.api._data.value Before: " + c.api._data.value), 
                c.api._data.value.splice(b, 1), console.log("scope.api._data.value After: " + c.api._data.value));
            }
            var i, j, k, l = [], m = [], n = "gl-invalid", o = "gl-checkbox-checked", p = "gl-checkbox-disabled";
            c.api = c.api || {}, c.api._data = {}, c.api._data.value = angular.isUndefined(c.settings.value) ? void 0 : c.settings.value, 
            c.api._data.options = angular.isUndefined(c.settings.options) ? void 0 : c.settings.options, 
            c.api._data.name = angular.isUndefined(c.settings.name) ? void 0 : c.settings.name, 
            c.api._data.valid = angular.isUndefined(c.settings.valid) ? !0 : c.settings.valid, 
            c.api._data.error = angular.isUndefined(c.settings.error) ? void 0 : c.settings.error, 
            c.api._data.label = angular.isUndefined(c.settings.label) ? void 0 : c.settings.label, 
            c.api._data.disabled = angular.isUndefined(c.settings.disabled) ? !1 : c.settings.disabled, 
            c.api._data.editable = angular.isUndefined(c.settings.editable) ? !0 : c.settings.editable, 
            c.api._data.onChange = angular.isFunction(c.settings.onChange) ? c.settings.onChange : void 0, 
            c.api.view = function() {
                w();
            }, c.api.edit = function() {
                v();
            };
            // Templates
            var q = '<input type="checkbox" class="gl-checkbox-input">', r = '<label class="gl-checkbox-label"></label>', s = '<p class="gl-checkbox-error" data-ng-bind="api._data.error"></p>', t = '<label class="gl-checkbox-view-label">{{api._data.label}}</label>', u = "<p class=\"gl-checkbox-view-value\">{{api._data.value.join(', ') }}</p>";
            c.api.setInvalid = function(a) {
                c.api._data.valid = !1, c.api._data.error = angular.isString(a) ? a : void 0, x();
            }, c.api.setValid = function() {
                c.api._data.valid = !0, x();
            }, c.api.setOptions = function(a) {
                angular.isArray(a) && (c.api._data.options = a, c.api._data.editable ? v() : w(), 
                c.api._data.value = []);
            }, c.api._data.selectOption = function(a) {
                c.api._data.disabled || c.api.setValue(a);
            }, c.api.setValue = function(a) {
                angular.isArray(a) || (a = [ a ]);
                for (var b = 0; b < a.length; b++) {
                    for (var d, e = a[b], f = 0; f < c.api._data.options.length; f++) {
                        var i = c.api._data.options[f];
                        if (i.value == e) {
                            d = f;
                            break;
                        }
                    }
                    if (!angular.isUndefined(d)) {
                        var j = l[d].attr("checked");
                        angular.isUndefined(j) ? (l[d].attr("checked", !0), m[d].addClass(o), g(e)) : (l[d].removeAttr("checked"), 
                        m[d].removeClass(o), h(e));
                    }
                }
            }, c.api.getValue = function() {
                return c.api._data.value;
            }, c.api.disable = function() {
                c.api._data.disabled = !0;
                for (var a = 0; a < l.length; a++) l[a].attr("disabled", !0);
                for (var a = 0; a < m.length; a++) m[a].addClass(p);
            }, c.api.enable = function() {
                c.api._data.disabled = !1;
                for (var a = 0; a < l.length; a++) l[a].attr("disabled", !0);
                for (var a = 0; a < m.length; a++) m[a].removeClass(p);
            };
            var v = function() {
                c.api._data.editable = !0, d.children().remove();
                for (var b = 0; b < c.api._data.options.length; b++) {
                    var e = c.api._data.options[b], f = c.api._data.name + "-" + b, g = f;
                    l[b] = angular.element(q), l[b].attr({
                        name: f,
                        id: g,
                        value: e.value
                    }), m[b] = angular.element(r), m[b].attr({
                        "for": g,
                        "data-ng-click": "api._data.selectOption('" + e.value + "')"
                    }), m[b].html(e.label), d.append(a(l[b])(c)), d.append(a(m[b])(c));
                }
                angular.isUndefined(c.api._data.value) || c.api.setValue(c.api._data.value), 1 == c.api._data.disabled && c.api.disable(), 
                x();
            }, w = function() {
                c.api._data.editable = !1, d.children().remove(), angular.isString(c.api._data.label) && (j = a(angular.element(t))(c), 
                d.append(j)), k = a(angular.element(u))(c), d.append(k);
            }, x = function() {
                angular.isUndefined(i) || i.remove(), c.api._data.editable && (c.api._data.valid ? (d.children("input").removeClass(n), 
                d.children(".gl-checkbox-label").removeClass(n)) : (d.children("input:checked").addClass(n), 
                d.children(".gl-checkbox-label").addClass(n), angular.isString(c.api._data.error) && b(function() {
                    i = a(angular.element(s))(c), // ensure .error has been updated prior to this compile
                    d.append(i);
                }, 0)));
            };
            c.$watchCollection("api._data.value", function(a, b) {
                angular.isUndefined(c.api._data.onChange) || c.api._data.onChange(c.api.getValue());
            }), c.api._data.editable ? v() : w();
        }
    };
} ]);
//# sourceMappingURL=glcheckbox.min.js.map